#!/usr/bin/env python3
from openai import OpenAI
from prompt_toolkit import PromptSession
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.application import run_in_terminal
from prompt_toolkit.shortcuts import clear
from colorama import Fore, Style, init as colorama_init
import json


def call_api(messages, client, model="deepseek-chat"):
    try:
        response = client.chat.completions.create(
            model=model,
            messages=messages,
            stream=False
        )
        return response.choices[0].message.content
    except Exception as e:
        raise e
        return f"Error: {e}"


def clean_emojies(text, emoji_map):
    for emoji in emoji_map:
        text = text.replace(emoji, emoji_map[emoji])
    return text


def chat_loop(client, config, model="deepseek-chat"):
    colorama_init(autoreset=True)
    if "ctrl_enter_new_line" in config and config["ctrl_enter_new_line"]:
        new_line_key = "c-j"
        send_key = "enter"
    else:
        new_line_key = "enter"
        send_key = "c-j"
    print(f"Welcome to ChatSSH!, <ctrl-c> to exit, and {send_key} to send message, and {new_line_key} for new line, <c-n> for new session.")
    print(f"Now using model: {Fore.GREEN} {model} {Style.RESET_ALL}")

    system_role_name = "system"
    if model in {}:
        system_role_name = "developer"
    elif model in {"o1-mini", "o1", "o1-preview"}:
        system_role_name = "user"
    messages = [
        {"role": system_role_name, "content": "You are a helpful assistant, keep everything brief."}
    ]

    session = PromptSession()
    bindings = KeyBindings()

    @bindings.add(new_line_key)
    def _(event):
        event.app.current_buffer.insert_text("\n")

    @bindings.add(send_key)
    def _(event):
        user_input = event.app.current_buffer.text.strip()
    
        event.app.current_buffer.reset()  
    
        run_in_terminal(lambda: reprint_user_input(user_input))
        run_in_terminal(lambda: call_api_and_get_resp(user_input))
        
    @bindings.add('up') 
    def _(event):
        current_buffer = event.app.current_buffer
        document = current_buffer.document

        if document.cursor_position_row > 0:
            target_column = document.cursor_position_col
            previous_line_length = len(document.lines[document.cursor_position_row - 1])
            new_column = min(previous_line_length, target_column)
            current_buffer.cursor_position += document.get_start_of_line_position(-1) + new_column

    @bindings.add('down')  
    def _(event):
        current_buffer = event.app.current_buffer
        document = current_buffer.document

        if document.cursor_position_row < document.line_count - 1:
            target_column = document.cursor_position_col
            next_line_length = len(document.lines[document.cursor_position_row + 1])
            new_column = min(next_line_length, target_column)
            current_buffer.cursor_position += document.get_start_of_line_position(1) + new_column
            
    @bindings.add('backspace')
    def _(event):
        current_buffer = event.app.current_buffer
        document = current_buffer.document

        if current_buffer.cursor_position > 0:
                current_buffer.delete_before_cursor()
        event.app.current_buffer.text = current_buffer.text
        
    @bindings.add("c-n")
    def _(event):
        event.app.exit(result="new")

    @bindings.add("c-b")
    def _(event):
        event.app.exit(result="change_model")

    def reprint_user_input(user_input):
        print(f"{Fore.CYAN}{user_input}{Style.RESET_ALL}")
        
    def call_api_and_get_resp(user_input):
        nonlocal messages
        if not user_input.strip():
            return

        # Add user input to the conversation
        messages.append({"role": "user", "content": user_input})

        try:
            # Get API response
            response = call_api(messages, client, model)
            messages.append({"role": "assistant", "content": response})
            response = clean_emojies(response, config['emojis'])
            print(f"{Fore.GREEN}{response}{Style.RESET_ALL}")
        except Exception as e:
            print(f"{Fore.RED}Error: {e}{Style.RESET_ALL}")

    try:
        while True:
            ret = session.prompt(f"$:", key_bindings=bindings)
            if ret in {"new", "change_model"}:
                return ret
    except KeyboardInterrupt:
        print(f"{Fore.RED}\nSession ended. {Style.RESET_ALL}")
        return "end"

def change_model(config):
    while True:
        available_providers = {"deepseek", "openai"}
        print(f"Enter the provider you want to use: {Fore.GREEN}")
        for provider in available_providers:
            print(f"{provider}")
        print(f"{Style.RESET_ALL}")
        provider = input().strip()
        if provider in config.keys() and "base_url" in config[provider] and "api_key" in config[provider]:
            break
        print(f"{Fore.RED}Invalid provider or incomplete config file, try again.{Style.RESET_ALL}")
    base_url = config[provider]['base_url']
    api_key = config[provider]['api_key']
    client = OpenAI(api_key=api_key, base_url=base_url)
    
    while True:
        print(f"{Fore.YELLOW}Enter the model you want to use {Fore.GREEN}")
        available_models = list()
        for model in client.models.list():
            available_models.append(model.id)
        for model in available_models:
            print(f"{model}")
        print(f"{Style.RESET_ALL}")
        model = input().strip()
        
        if model in available_models:
            break
        print(f"{Fore.RED}Invalid model, try again.{Style.RESET_ALL}")
    return client, model
    

if __name__ == '__main__':
    import os
    config_path = None
    if config_path is None:
        config_path = "~/.config/chatssh.json"
    if os.path.exists(config_path):
        config_path = os.path.expanduser(config_path)
    else:
        config_path = "/etc/chatssh.json"
    with open(config_path, "r") as f:
        config = json.load(f)

    provider = config['provider']
    model = config['model']
    base_url = config[provider]['base_url']
    api_key = config[provider]['api_key']


    client = OpenAI(api_key=api_key, base_url=base_url)
    while True:
        results = chat_loop(client, config, model=model)
        if results == "end":
            break
        elif results == "new":
            clear()
        elif results == "change_model":
            clear()
            client, model = change_model(config)
        else:
            break

