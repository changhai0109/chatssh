#!/usr/bin/env python3
from openai import OpenAI
from prompt_toolkit import PromptSession
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.application import run_in_terminal
from prompt_toolkit.shortcuts import clear
from colorama import Fore, Style, init as colorama_init
import json


def call_api(messages, client, model="deepseek-chat"):
    try:
        response = client.chat.completions.create(
            model=model,
            messages=messages,
            stream=False
        )
        return response.choices[0].message.content
    except Exception as e:
        raise e
        return f"Error: {e}"


def clean_emojies(text, emoji_map):
    for emoji in emoji_map:
        text = text.replace(emoji, emoji_map[emoji])
    return text


def chat_loop(client, config, model="deepseek-chat"):
    colorama_init(autoreset=True)
    if "ctrl_enter_new_line" in config and config["ctrl_enter_new_line"]:
        new_line_key = "c-j"
        send_key = "enter"
    else:
        new_line_key = "enter"
        send_key = "c-j"
    print(f"Welcome to ChatSSH!, <ctrl-c> to exit, and {send_key} to send message, and {new_line_key} for new line.")
    print(f"Now using model: {Fore.GREEN} {model} {Style.RESET_ALL}")

    messages = [
        {"role": "system", "content": "You are a helpful assistant, keep everything brief."}
    ]

    session = PromptSession()
    bindings = KeyBindings()

    @bindings.add(new_line_key)
    def _(event):
        event.app.current_buffer.insert_text("\n")

    @bindings.add(send_key)
    def _(event):
        user_input = event.app.current_buffer.text.strip()
    
        event.app.current_buffer.reset()  
    
        run_in_terminal(lambda: reprint_user_input(user_input))
        run_in_terminal(lambda: call_api_and_get_resp(user_input))
        
    @bindings.add('up') 
    def _(event):
        current_buffer = event.app.current_buffer
        document = current_buffer.document

        if document.cursor_position_row > 0:
            target_column = document.cursor_position_col
            previous_line_length = len(document.lines[document.cursor_position_row - 1])
            new_column = min(previous_line_length, target_column)
            current_buffer.cursor_position += document.get_start_of_line_position(-1) + new_column

    @bindings.add('down')  
    def _(event):
        current_buffer = event.app.current_buffer
        document = current_buffer.document

        if document.cursor_position_row < document.line_count - 1:
            target_column = document.cursor_position_col
            next_line_length = len(document.lines[document.cursor_position_row + 1])
            new_column = min(next_line_length, target_column)
            current_buffer.cursor_position += document.get_start_of_line_position(1) + new_column
            
    @bindings.add('backspace')
    def _(event):
        current_buffer = event.app.current_buffer
        document = current_buffer.document

        if current_buffer.cursor_position > 0:
                current_buffer.delete_before_cursor()
        event.app.current_buffer.text = current_buffer.text

    def reprint_user_input(user_input):
        print(f"{Fore.CYAN}{user_input}{Style.RESET_ALL}")
        
    def call_api_and_get_resp(user_input):
        nonlocal messages
        if not user_input.strip():
            return

        # Add user input to the conversation
        messages.append({"role": "user", "content": user_input})

        try:
            # Get API response
            response = call_api(messages, client, model)
            messages.append({"role": "assistant", "content": response})
            response = clean_emojies(response, config['emojis'])
            print(f"{Fore.GREEN}{response}{Style.RESET_ALL}")
        except Exception as e:
            print(f"{Fore.RED}Error: {e}{Style.RESET_ALL}")

    try:
        while True:
            session.prompt(f"$:", key_bindings=bindings)
    except KeyboardInterrupt:
        print(f"{Fore.RED}\nSession ended. {Style.RESET_ALL}")


if __name__ == '__main__':
    config_path = None
    if config_path is None:
        config_path = "/etc/chatssh.json"
    with open(config_path, "r") as f:
        config = json.load(f)

    provider = config['provider']
    model = config['model']
    base_url = config[provider]['base_url']
    api_key = config[provider]['api_key']


    client = OpenAI(api_key=api_key, base_url=base_url)
    chat_loop(client, config, model=model)


    


